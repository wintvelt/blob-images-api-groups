service: blob-images-api-groups

package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables
  - serverless-domain-manager

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: eu-central-1
  tags:
    APP: clubalmanac

  environment:
    photoTable: ${file(./serverlessDomainConfig.js):photoTable.${self:provider.stage}}
    coverIndex: cover-idx
    photoIndex: SK-PK-idx
    emailIndex: email-idx
    cognitoIndex: cog-idx
    dateIndex: date-idx
    frontend: ${file(./serverlessDomainConfig.js):frontend.${self:provider.stage}}
    bucket: ${file(./serverlessDomainConfig.js):bucket.${self:provider.stage}}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeStream
        - dynamodb:ListStreams
      Resource: "arn:aws:dynamodb:eu-central-1:*:*"
    - Effect: Allow
      Action:
        - ses:SendEmail
        - ses:SendRawEmail
        - ses:SendTemplatedEmail
        - ses:SendBulkTemplatedEmail
      Resource: "arn:aws:ses:eu-central-1:*:*"
    - Effect: Allow
      Action:
        - s3:getObject
      Resource: "arn:aws:s3:::*"

functions:
  createGroup:
    handler: handlersGroup/createGroup.main
    events:
      - http:
          path: /
          method: post
          cors: true
          authorizer: aws_iam
  getGroup:
    handler: handlersGroup/getGroup.main
    events:
      - http:
          path: /{id}
          method: get
          cors: true
          authorizer: aws_iam
  listGroups:
    handler: handlersGroup/listGroups.main
    events:
      - http:
          path: /
          method: get
          cors: true
          authorizer: aws_iam
  listGroupPhotos:
    handler: handlersGroup/listGroupPhotos.main
    events:
      - http:
          path: /{id}/photos
          method: get
          cors: true
          authorizer: aws_iam
  listGroupMembers:
    handler: handlersGroup/listMembers.main
    events:
      - http:
          path: /{id}/members
          method: get
          cors: true
          authorizer: aws_iam
  updateGroup:
    handler: handlersGroup/updateGroup.main
    events:
      - http:
          path: /{id}
          method: put
          cors: true
          authorizer: aws_iam
  deleteGroup:
    handler: handlersGroup/deleteGroup.main
    events:
      - http:
          path: /{id}
          method: delete
          cors: true
          authorizer: aws_iam
  updateMembership:
    handler: handlersGroup/updateMembership.main
    events:
      - http:
          path: /{id}/membership/{memberid}
          method: put
          cors: true
          authorizer: aws_iam
  deleteMembership:
    handler: handlersGroup/deleteMembership.main
    events:
      - http:
          path: /{id}/membership/{memberid}
          method: delete
          cors: true
          authorizer: aws_iam
  sendInvite:
    handler: handlersGroup/sendInvite.main
    events:
      - http:
          path: /{id}/invite
          method: post
          cors: true
          authorizer: aws_iam
        
  getAlbumPhoto:
    handler: handlersAlbum/getAlbumPhoto.main
    events:
      - http:
          path: /{id}/albums/{albumid}/photos/{photoid}
          method: get
          cors: true
          authorizer: aws_iam
  createAlbum:
    handler: handlersAlbum/createAlbum.main
    events:
      - http:
          path: /{id}/albums
          method: post
          cors: true
          authorizer: aws_iam
  listAlbums:
    handler: handlersAlbum/listAlbums.main
    events:
      - http:
          path: /{id}/albums
          method: get
          cors: true
          authorizer: aws_iam
  getAlbum:
    handler: handlersAlbum/getAlbum.main
    events:
      - http:
          path: /{id}/albums/{albumid}
          method: get
          cors: true
          authorizer: aws_iam
  updateAlbum:
    handler: handlersAlbum/updateAlbum.main
    events:
      - http:
          path: /{id}/albums/{albumid}
          method: put
          cors: true
          authorizer: aws_iam
  deleteAlbum:
    handler: handlersAlbum/deleteAlbum.main
    events:
      - http:
          path: /{id}/albums/{albumid}
          method: delete
          cors: true
          authorizer: aws_iam
  createAlbumPhoto:
    handler: handlersAlbum/createAlbumPhoto.main
    events:
      - http:
          path: /{id}/albums/{albumid}/photos
          method: post
          cors: true
          authorizer: aws_iam
  deleteAlbumPhoto:
    handler: handlersAlbum/deleteAlbumPhoto.main
    events:
      - http:
          path: /{id}/albums/{albumid}/photos/{photoid}
          method: delete
          cors: true
          authorizer: aws_iam
  listAlbumPhotos:
    handler: handlersAlbum/listAlbumPhotos.main
    events:
      - http:
          path: /{id}/albums/{albumid}/photos
          method: get
          cors: true
          authorizer: aws_iam
                                
custom:
  customDomain:
    domainName: ${file(./serverlessDomainConfig.js):domain.${self:provider.stage}}
    basePath: 'groups' # This will be prefixed to all routes
    stage: ${self:provider.stage}
    createRoute53Record: true

resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}